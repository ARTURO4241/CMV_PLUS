# -*- coding: utf-8 -*-
"""REVISION_PANTALLA

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11JD4NBDeS4k57BsbmCUB1RK35Nv4YODw

#LIBRERIAS
"""

pip.main(['install', 'matplotlib'])
pip.main(['install', 'plotly'])
pip.main(['install', 'plotly_express'])
pip.main(["install","openpyxl"])
import pandas as pd
import numpy as np
import plotly.express as px
from datetime import datetime, timedelta
import streamlit as st

"""#METODOS"""

def reemplazos(v):
  v=str(v)
  v=v.replace(',','')
  return v

def nombres(a,b,c):
  return str(a)+' '+str(b)+' '+str(c)

def maximizador_pantalla(DF):
  TEMPORAL=DF.groupby('numero_socio').max()
  TEMPORAL['numero_socio']=TEMPORAL.index
  TEMPORAL=TEMPORAL.reset_index(drop=True)
  TEMPORAL=TEMPORAL[['numero_socio','paso']]
  TEMPORAL=TEMPORAL.rename(columns={'paso':'PASO_MAXIMO'})
  return TEMPORAL

def maximizador_fecha(DF):
  TEMPORAL=DF.groupby('numero_socio').max()
  TEMPORAL['numero_socio']=TEMPORAL.index
  TEMPORAL=TEMPORAL.reset_index(drop=True)
  TEMPORAL=TEMPORAL[['numero_socio','FECHA']]
  TEMPORAL=TEMPORAL.rename(columns={'FECHA':'FECHA_MAXIMA'})
  return TEMPORAL

def ULTIMA_PANTALLA(v):
  if v==0:
    return 'PANTALLA HOME'
  elif v==1:
    return 'DATOS PERSONALES'
  elif v==2:
    return 'DATOS ADICIONALES'
  elif v==3:
    return 'VERIFICACION CELULAR Y ACEPTACION BURO'
  elif v==4:
    return 'VERIFICACION INE'
  elif v==5:
    return 'COMPROBANTE DE DOMICILIO'
  elif v==6:
    return 'VALIDACION DE SELFI'
  elif v==7:
    return 'VIDEO_SELFIE'
  elif v==8:
    return 'PENDIENTE'
  elif v==9:
    return 'BENEFICIOS DE SER SOCIO, PARAMETRIZAR Y CONFIRMAR OFERTA'
  elif v==10:
    return 'NO ENCONTRADO'
  elif v==11:
    return 'MESA DE CONTROL'

"""#ARCHIVO"""

DF=pd.read_excel('ONBOARDING ACTIVA 2 AL 19 ENERO.xlsx',sheet_name='Hoja1',usecols=['nombre_s','apellido_paterno','apellido_materno','numero_socio','celular','evaluado','aprobado','mensaje_rechazo','paso_proceso','Icc','BcScore','EstimadorIngresos','fecha_created_at'])
DF=DF.rename(columns={'paso_proceso':'paso','fecha_created_at':'FECHA'})

"""LIMPIEZA"""

DF=DF.merge(maximizador_pantalla(DF),on='numero_socio',how='left')
DF=DF.drop('paso',axis=1)
DF=DF.merge(maximizador_fecha(DF),on='numero_socio',how='left')
DF=DF.drop('FECHA',axis=1)
DF=DF.rename(columns={'PASO_MAXIMO':'paso'})
DF=DF.rename(columns={'FECHA_MAXIMA':'FECHA'})
DF['NOMBRE']=list(map(nombres,DF['nombre_s'],DF['apellido_paterno'],DF['apellido_materno']))
DF['ultima_pantalla']=list(map(ULTIMA_PANTALLA,DF['paso']))
DF=DF.drop_duplicates()
DF=DF[['NOMBRE','numero_socio','celular','evaluado','aprobado','mensaje_rechazo','ultima_pantalla','paso','Icc','BcScore','EstimadorIngresos','FECHA']]

DF=DF.fillna('VACIO')

"""#CODIGO"""

st.title("PROTOTIPO FUNNELL")

"""##FUNNEL"""

st.markdown(f' FUNNEL')

LISTA_PASOS=[]
LISTA_VALORES=[]

for i in range(0,12):
  LISTA_PASOS.append(i)
  LISTA_VALORES.append(len(DF[DF['paso']>=i]))

LISTA_PASOS=list(map(ULTIMA_PANTALLA,LISTA_PASOS))

data = dict(
    number=LISTA_VALORES,
    stage=LISTA_PASOS)
fig = px.funnel(data, x='number', y='stage')
fig.show()
st.plotly_chart(fig) # de esta forma se va a mostrar el dataframe en Streamlit

"""##BARRAS DE ACTIVIDAD"""

st.markdown(f' AFLUENCIA DIARIA EN EL UNBORDING 2.0')

fecha_minima=DF['FECHA'].min()
fecha_maxima=DF['FECHA'].max()
fechas=[]
dias_a_sumar = 1
fechita=fecha_minima


while fechita<=fecha_maxima:
  fechas.append(fechita)
  fechita = fechita + timedelta(days=dias_a_sumar)

ACTIVIDAD=[]
for i in range(0,len(fechas)-1):
  ACTIVIDAD.append(len(DF[(DF['FECHA']>=fechas[i])&(DF['FECHA']<=fechas[i+1])]))

# Datos de muestra
x = fechas[0:len(ACTIVIDAD)]
y = ACTIVIDAD
df = pd.DataFrame(list(zip(x,y)),columns=['FECHA','FRECUENCIA'])
fig = px.bar(df, x = 'FECHA', y = 'FRECUENCIA')
fig.show()
st.plotly_chart(fig) # de esta forma se va a mostrar el dataframe en Streamlit

# Datos
#x = fechas[0:len(ACTIVIDAD)]
#y = ACTIVIDAD

# Gráfico de barras
#fig, ax = plt.subplots(figsize=(20,10))
#ax.bar(x=x, height=y)

# Mostrar el gráfico
#plt.show()

"""##EN PROCESO"""

st.markdown(f' CAIDOS')

TEMPORAL=DF[(DF['aprobado']==1)&(DF['evaluado']==1)&(DF['mensaje_rechazo']=='VACIO')]
TEMPORAL=TEMPORAL[['NOMBRE','numero_socio','celular','ultima_pantalla','paso','FECHA']]
TEMPORAL=TEMPORAL.sort_values(by='paso')
TEMPORAL=TEMPORAL.reset_index(drop=True)
TEMPORAL['NUMERO_SOCIO']=list(map(reemplazos,TEMPORAL['NUMERO_SOCIO']))
TEMPORAL['CELULAR']=list(map(reemplazos,TEMPORAL['CELULAR']))
TEMPORAL=TEMPORAL.rename(columns={'numero_socio':'NUMERO_SOCIO','celular':'CELULAR','ultima_pantalla':'ULTIMA_PANTALLA','paso':'PASO'})
TEMPORAL.to_csv('EN PROCESO.csv')
st.write(TEMPORAL)

PROCESOS=TEMPORAL.pivot_table( ['FECHA'], ['PASO','NOMBRE','NUMERO_SOCIO','CELULAR'])
#PROCESOS=PROCESOS.sort_values(by='FECHA',ascending=False)
PROCESOS.to_csv('PROCESOS_PIVOTE.csv')
PROCESOS

"""##APROBADOS"""

TEMPORAL=DF[(DF['aprobado']==1)&(DF['evaluado']==1)&(DF['mensaje_rechazo']=='N')]#&(DF['paso']==11)]
TEMPORAL=TEMPORAL[['NOMBRE','numero_socio','celular','ultima_pantalla','paso','FECHA']]
TEMPORAL=TEMPORAL.sort_values(by='paso')
TEMPORAL=TEMPORAL.reset_index(drop=True)
TEMPORAL=TEMPORAL.rename(columns={'numero_socio':'NUMERO_SOCIO','celular':'CELULAR','ultima_pantalla':'ULTIMA_PANTALLA','paso':'PASO'})
TEMPORAL=TEMPORAL.drop('PASO',axis=1)
TEMPORAL['NUMERO_SOCIO']=list(map(reemplazos,TEMPORAL['NUMERO_SOCIO']))
TEMPORAL['CELULAR']=list(map(reemplazos,TEMPORAL['CELULAR']))
TEMPORAL.to_csv('APROBADOS.csv')
st.write(TEMPORAL)

"""##RECHAZADO"""

TEMPORAL=DF[(DF['aprobado']==0)&(DF['evaluado']==1)]
TEMPORAL=TEMPORAL[['NOMBRE','numero_socio','celular','mensaje_rechazo','Icc','BcScore','EstimadorIngresos','paso','FECHA']]
TEMPORAL=TEMPORAL.sort_values(by='mensaje_rechazo')
TEMPORAL=TEMPORAL.reset_index(drop=True)
TEMPORAL=TEMPORAL.rename(columns={'numero_socio':'NUMERO_SOCIO','celular':'CELULAR','mensaje_rechazo':'MENSAJE_RECHAZO','Icc':'ICC','BcScore':'BCSCORE','EstimadorIngresos':'ESTIMADOR_INGRESOS','paso':'PASO'})
df['NUMERO_SOCIO']=list(map(reemplazos,df['NUMERO_SOCIO']))
df['CELULAR']=list(map(reemplazos,df['CELULAR']))
TEMPORAL.to_csv('RECHAZADO.csv')st.write(TEMPORAL)

RECHAZOS=TEMPORAL.pivot_table(['ICC','BCSCORE','ESTIMADOR_INGRESOS','FECHA'],['PASO','MENSAJE_RECHAZO','NOMBRE','NUMERO_SOCIO','CELULAR'])
RECHAZOS=RECHAZOS.sort_values(by='FECHA',ascending=False)
RECHAZOS.to_csv('RECHAZOS_PIVOTE.csv')
RECHAZOS

"""##INDEFINIDO"""

TEMPORAL=DF[(DF['aprobado']==0)&(DF['evaluado']==0)]
TEMPORAL=TEMPORAL[['NOMBRE','numero_socio','celular','mensaje_rechazo','paso','FECHA']]
TEMPORAL=TEMPORAL.sort_values(by='mensaje_rechazo')
TEMPORAL=TEMPORAL.reset_index(drop=True)
TEMPORAL=TEMPORAL.rename(columns={'numero_socio':'NUMERO_SOCIO','celular':'CELULAR','mensaje_rechazo':'MENSAJE_RECHAZO','paso':'PASO'})
TEMPORAL.to_csv('INDEFINIDO.csv')
TEMPORAL

